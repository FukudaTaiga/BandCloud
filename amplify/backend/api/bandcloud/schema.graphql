schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ModelTodoConnection {
  items: [Todo]
  nextToken: String
  startedAt: AWSTimestamp
}

type Mutation {
  createStudio(input: CreateStudioInput!): Studio
  createTodo(condition: ModelTodoConditionInput, input: CreateTodoInput!): Todo
  deleteStudio(input: DeleteStudioInput!): Studio
  deleteTodo(condition: ModelTodoConditionInput, input: DeleteTodoInput!): Todo
  updateStudio(input: UpdateStudioInput!): Studio
  updateTodo(condition: ModelTodoConditionInput, input: UpdateTodoInput!): Todo
}

type Query {
  getStudio(id: ID!): Studio
  getTodo(id: ID!): Todo
  listStudios(filter: TableStudioFilterInput, limit: Int, nextToken: String): StudioConnection
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  syncTodos(filter: ModelTodoFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelTodoConnection
}

type Studio {
  address: String
  erea: [String]
  fee: String
  group: String
  id: ID!
  name: String
  number_rooms: String
  phone: String
  station: String
  time: String
  url: String
}

type StudioConnection {
  items: [Studio]
  nextToken: String
}

type Subscription {
  onCreateStudio(erea: [String], group: String, id: ID, name: String, phone: String): Studio @aws_subscribe(mutations : ["createStudio"])
  onCreateTodo: Todo @aws_subscribe(mutations : ["createTodo"])
  onDeleteStudio(erea: [String], group: String, id: ID, name: String, phone: String): Studio @aws_subscribe(mutations : ["deleteStudio"])
  onDeleteTodo: Todo @aws_subscribe(mutations : ["deleteTodo"])
  onUpdateStudio(erea: [String], group: String, id: ID, name: String, phone: String): Studio @aws_subscribe(mutations : ["updateStudio"])
  onUpdateTodo: Todo @aws_subscribe(mutations : ["updateTodo"])
}

type Todo {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  createdAt: AWSDateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: AWSDateTime!
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateStudioInput {
  address: String
  erea: [String]
  fee: String
  group: String
  name: String
  number_rooms: String
  phone: String
  station: String
  time: String
  url: String
}

input CreateTodoInput {
  _version: Int
  description: String
  id: ID
  name: String!
}

input DeleteStudioInput {
  id: ID!
}

input DeleteTodoInput {
  _version: Int
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelTodoConditionInput {
  and: [ModelTodoConditionInput]
  description: ModelStringInput
  name: ModelStringInput
  not: ModelTodoConditionInput
  or: [ModelTodoConditionInput]
}

input ModelTodoFilterInput {
  and: [ModelTodoFilterInput]
  description: ModelStringInput
  id: ModelIDInput
  name: ModelStringInput
  not: ModelTodoFilterInput
  or: [ModelTodoFilterInput]
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableStudioFilterInput {
  address: TableStringFilterInput
  erea: TableStringFilterInput
  fee: TableStringFilterInput
  group: TableStringFilterInput
  id: TableIDFilterInput
  name: TableStringFilterInput
  number_rooms: TableStringFilterInput
  phone: TableStringFilterInput
  station: TableStringFilterInput
  time: TableStringFilterInput
  url: TableStringFilterInput
}

input UpdateStudioInput {
  address: String
  erea: [String]
  fee: String
  group: String
  id: ID!
  name: String
  number_rooms: String
  phone: String
  station: String
  time: String
  url: String
}

input UpdateTodoInput {
  _version: Int
  description: String
  id: ID!
  name: String
}